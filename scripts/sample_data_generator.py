# Copyright 2025 Amazon.com, Inc. or its affiliates
# SPDX-License-Identifier: MIT-0

import sys
sys.path.append("../notebooks/jupyter")

import time
import coupon_sample_data as sample

####
# This Python script is generating logs for a malicious coupon code attack simply.
#
# 1. It simulates a normal coupon code verification request that is randomly generated.
# 2. An attack request is generated by changing the last 4 digits of the coupon code in the specified sequence.
# 3. Send generated normal messages and attack messages to DynamoDB.
####

# General
STEPS = 3   # number of message generation steps
INTERVAL = 2 # seconds between each steps

# DynamoDB Table to store coupon access logs
DDB_TABLE_NAME = "proto--log-input"

# Valid Message Setup
VALID_MESSAGES_IN_STEPS = [1 for _ in range(STEPS)]

# Feaud Message Setup
FRAUD_COUPON_CODE = "0000-0000-0000-0000"
NUM_OF_FRAUD_MESSAGES_IN_STEPS = [
    {'step': 2, 'count': 3 },
    {'step': 3, 'count': 3 },
    {'step': 4, 'count': 3 },
]

FRAUD_MESSAGES_IN_STEPS = [0 for _ in range(STEPS)]
for s in NUM_OF_FRAUD_MESSAGES_IN_STEPS:
    if len(FRAUD_MESSAGES_IN_STEPS) > s['step']:
        FRAUD_MESSAGES_IN_STEPS[s['step']] = s['count']

# View Config Summary
print(f"STEPS: {STEPS}")
print(f"INTERVAL: {INTERVAL}")
print(f"DDB_TABLE_NAME: {DDB_TABLE_NAME}")
print(f"VALID_MESSAGES_IN_STEPS: {VALID_MESSAGES_IN_STEPS}")
print(f"FRAUD_MESSAGES_IN_STEPS: {FRAUD_MESSAGES_IN_STEPS}")
print(f"FRAUD_COUPON_CODE: {FRAUD_COUPON_CODE}")

## Script main
if __name__ == "__main__":
    print("start.")
    print("==================================")

    for n in range(STEPS):
        print(f'msg seq: {n}')
        log_items = []

        # valid log
        for i in range(VALID_MESSAGES_IN_STEPS[n]):
            msg = sample.get_valid_message()
            log_items.append(msg)
            
        # fraud log
        for i in range(FRAUD_MESSAGES_IN_STEPS[n]):
            msg = sample.get_fraud_message(FRAUD_COUPON_CODE)
            log_items.append(msg)
        
        # write messages to dynamodb
        if len(log_items) > 0:
            print(log_items)
            sample.batch_write_items(DDB_TABLE_NAME, log_items)
        
        # wait to next seq
        time.sleep(INTERVAL)

    print("==================================")
    print("done.")
